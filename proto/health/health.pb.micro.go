// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/health/health.proto

package health

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Health service

func NewHealthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Health service

type HealthService interface {
	// Health 监控检查
	Health(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type healthService struct {
	c    client.Client
	name string
}

func NewHealthService(name string, c client.Client) HealthService {
	return &healthService{
		c:    c,
		name: name,
	}
}

func (c *healthService) Health(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Health.Health", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Health service

type HealthHandler interface {
	// Health 监控检查
	Health(context.Context, *Request, *Response) error
}

func RegisterHealthHandler(s server.Server, hdlr HealthHandler, opts ...server.HandlerOption) error {
	type health interface {
		Health(ctx context.Context, in *Request, out *Response) error
	}
	type Health struct {
		health
	}
	h := &healthHandler{hdlr}
	return s.Handle(s.NewHandler(&Health{h}, opts...))
}

type healthHandler struct {
	HealthHandler
}

func (h *healthHandler) Health(ctx context.Context, in *Request, out *Response) error {
	return h.HealthHandler.Health(ctx, in, out)
}
